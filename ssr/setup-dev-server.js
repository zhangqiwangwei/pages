const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const chokidar = require('chokidar')
const serverConfig = require('./server-config');
const clientConfig = require('./client-config');

const resolve = (file) => path.resolve(__dirname, file);
const readFile = (fs, file) => {
    try {
        return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    } catch (e) {
    }
}

module.exports = function setupDevServer(app, tempaltePath, cb) {
    let bundle, clientManifest, ready;
    const readyPromise = new Promise(r => {
        ready = r
    })
    const update = () => {
        if (bundle && clientManifest) {
            ready();
            cb(bundle, {
                runInNewContext: false,
                template,
                clientManifest
            })
        }
    };

    // read template from disk and watch
    let template = require('fs').readFileSync(tempaltePath, 'utf-8');
    chokidar.watch(tempaltePath).on('change', () => {
        template = require('fs').readFileSync(tempaltePath, 'utf-8');
        console.log('template updated.');
        update();
    });

    // watch and update server renderer
    const serverCompiler = webpack(serverConfig);
    const mfs = new MFS();
    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, stats) => {
        if (err) throw err;
        stats = stats.toJson();
        if (stats.errors.length) {
            new Error(JSON.stringify(stats));
            return
        }
        console.time('server updated:');
        // read bundle generated by vue-ssr-webpack-plugin
        bundle = JSON.parse(mfs.readFileSync(resolve('./dist/vue-ssr-server-bundle.json')));
        update();
        console.timeEnd('server updated:');
    });
    //watch and update client manifest
    //modify client config to work with hot middleware
    clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app];
    clientConfig.output.filename = '[name].js';
    clientConfig.plugins.push(
        new webpack.HotModuleReplacementPlugin(),
        new webpack.NoEmitOnErrorsPlugin()
    );
    // dev middleware
    const clientCompiler = webpack(clientConfig);
    const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
        publicPath: clientConfig.output.publicPath,
        noInfo: true
    });
    app.use(devMiddleware);
    clientCompiler.hooks.done.tap("WebpackDevMiddleware", ( stats => {
            console.time('client updated:');
            //stats = stats.toJson();
            //stats.errors.forEach(err => console.error(err));
            //stats.warnings.forEach(err => console.warn(err));
            //if (stats.errors.length) return;
            clientManifest = JSON.parse(readFile(
                devMiddleware.fileSystem,
                'vue-ssr-client-manifest.json'
            ));
            update();
            console.timeEnd('client updated:');
        })
    );
    //hot middleware
    app.use(require('webpack-hot-middleware')(clientCompiler, {heartbeat: 5000}));
    return readyPromise
};